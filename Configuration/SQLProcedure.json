{
    "MasterProcedure": "sp_Validate_PatientStudy_ByNulls.sql",
    "Procedures": {
        "sp_MarkPatientStudyDuplicates.sql": [
            "SET ANSI_NULLS ON;",
            "SET QUOTED_IDENTIFIER ON;",
            "GO",
            " ",
            "",
            "-- Drop the old batch-based proc if it exists",
            "IF OBJECT_ID('cmmt.sp_MarkPatientStudyDuplicates','P') IS NOT NULL",
            "  DROP PROCEDURE cmmt.sp_MarkPatientStudyDuplicates;",
            "GO",
            "",
            "CREATE PROCEDURE cmmt.sp_MarkPatientStudyDuplicates",
            "AS",
            "BEGIN",
            "  SET NOCOUNT ON;",
            " ",
            "  ;WITH RankedStudyInstancesForPatientStudy AS (",
            "    SELECT",
            "      Id, ",
            "      StudyInstanceUID,",
            "      COUNT(*) OVER (PARTITION BY StudyInstanceUID) AS CountOfUID",
            "    FROM cmmt.cmmt_PatientStudyMetaData",
            "    WHERE StudyInstanceUID IS NOT NULL",
            "    AND (Status IS NULL OR Status = '')",
            "  )",
            "  UPDATE cmmt.cmmt_PatientStudyMetaData",
            "  SET Status = 'D'",
            "  FROM cmmt.cmmt_PatientStudyMetaData AS p",
            "  INNER JOIN RankedStudyInstancesForPatientStudy AS r",
            "  ON p.Id = r.Id",
            "  WHERE r.CountOfUID > 1;",
            "END;",
            "GO"
        ],
        "sp_ImportValidationForSeries.sql": [
            "SET ANSI_NULLS ON",
            "GO",
            "SET QUOTED_IDENTIFIER ON",
            "GO",
            "-- Drop the old batch-based proc if it exists",
            "IF OBJECT_ID('cmmt.sp_ImportValidationForSeries','P') IS NOT NULL",
            "  DROP PROCEDURE cmmt.sp_ImportValidationForSeries;",
            "GO",
            "",
            "CREATE PROCEDURE [cmmt].[sp_ImportValidationForSeries]",
            "AS",
            "BEGIN",
            "  SET NOCOUNT ON;",
            " UPDATE cmmt.cmmt_PatientStudySeriesData",
            "SET Status = 'I'",
            "FROM cmmt.cmmt_PatientStudySeriesData",
            "WHERE (Status IS NULL OR Status = '')",
            "  AND (SOPInstanceUID   IS NULL OR LTRIM(RTRIM(SOPInstanceUID))   = ''",
            "  OR SOPClassUID   IS NULL OR LTRIM(RTRIM(SOPClassUID))   = ''",
            "  OR StudyInstanceUID   IS NULL OR LTRIM(RTRIM(StudyInstanceUID))   = ''",
            "  OR SeriesInstanceUID   IS NULL OR LTRIM(RTRIM(SeriesInstanceUID))   = '');",
            "",
            "UPDATE cmmt.cmmt_PatientStudySeriesData",
            "SET Status = 'V'",
            "FROM cmmt.cmmt_PatientStudySeriesData",
            "WHERE (Status IS NULL OR Status = '')",
            "  AND SOPInstanceUID   IS NOT NULL AND LTRIM(RTRIM(SOPInstanceUID))   <> ''",
            "  AND SOPClassUID   IS NOT NULL AND LTRIM(RTRIM(SOPClassUID))   <> ''",
            "  AND StudyInstanceUID   IS NOT NULL AND LTRIM(RTRIM(StudyInstanceUID))   <> ''",
            "  AND SeriesInstanceUID   IS NOT NULL AND LTRIM(RTRIM(SeriesInstanceUID))   <> '';",
            " END;",
            " GO"
        ],
        "sp_ImportValidationForPatient.sql": [
            "SET ANSI_NULLS ON;",
            "SET QUOTED_IDENTIFIER ON;",
            "GO",
            " ",
            "-- Drop the old batch-based proc if it exists",
            "IF OBJECT_ID('cmmt.sp_ImportValidationForPatient','P') IS NOT NULL",
            "  DROP PROCEDURE cmmt.sp_ImportValidationForPatient;",
            "GO",
            "",
            "CREATE PROCEDURE cmmt.sp_ImportValidationForPatient",
            "AS",
            "BEGIN",
            "  SET NOCOUNT ON;",
            " ",
            "-- 1) Mark INVALID if ANY rule fails",
            "UPDATE cmmt.cmmt_PatientStudyMetaData",
            "SET Status = 'I'",
            "FROM cmmt.cmmt_PatientStudyMetaData",
            "WHERE (Status IS NULL OR Status = '')",
            "  AND (",
            "       -- required fields missing",
            "       MRN             IS NULL OR LTRIM(RTRIM(MRN))             = ''",
            "    OR LastName        IS NULL OR LTRIM(RTRIM(LastName))        = ''",
            "    OR InstitutionName IS NULL OR LTRIM(RTRIM(InstitutionName)) = ''",
            "    OR LEN(LTRIM(RTRIM(AccessionNumber))) > 16",
            "       -- birthdate must parse as yyyy-MM-dd",
            "    OR TRY_CONVERT(date,Birthdate, 23) IS NULL",
            "    OR StudyInstanceUID   IS NULL OR LTRIM(RTRIM(StudyInstanceUID))   = '');",
            "",
            "",
            "--MRN,InstitutionName and Demographic check",
            "\tUPDATE p",
            "SET p.Status = 'I'",
            "FROM cmmt.cmmt_PatientStudyMetaData AS p",
            "WHERE",
            "    -- only update rows where Status is NULL or empty (not already marked)",
            "    (p.Status IS NULL OR p.Status = '')",
            "AND",
            "    EXISTS (",
            "        SELECT 1",
            "        FROM cmmt.cmmt_PatientStudyMetaData AS d",
            "        WHERE",
            "            d.Id <> p.Id",
            "            AND d.MRN = p.MRN",
            "            AND (d.Status IS NULL OR d.Status = '' OR d.Status = 'D' OR d.Status = 'I')",
            "            AND (",
            "                NOT (",
            "                    (d.FirstName IS NULL AND p.FirstName IS NULL)",
            "                    OR (LTRIM(RTRIM(d.FirstName)) = '' AND LTRIM(RTRIM(p.FirstName)) = '')",
            "                    OR (LTRIM(RTRIM(d.FirstName)) = LTRIM(RTRIM(p.FirstName)))",
            "                )",
            "                OR",
            "                NOT (",
            "                    (d.MiddleName IS NULL AND p.MiddleName IS NULL)",
            "                    OR (LTRIM(RTRIM(d.MiddleName)) = '' AND LTRIM(RTRIM(p.MiddleName)) = '')",
            "                    OR (LTRIM(RTRIM(d.MiddleName)) = LTRIM(RTRIM(p.MiddleName)))",
            "                )",
            "                OR",
            "                LTRIM(RTRIM(d.LastName)) <> LTRIM(RTRIM(p.LastName))",
            "                OR",
            "                TRY_CONVERT(date, d.Birthdate, 23) <> TRY_CONVERT(date, p.Birthdate, 23)",
            "                OR",
            "                d.Gender <> p.Gender",
            "            )",
            "    );",
            "",
            " ",
            "-- 2) Mark VALID if ALL rules pass",
            "UPDATE cmmt.cmmt_PatientStudyMetaData",
            "SET Status = 'V'",
            "FROM cmmt.cmmt_PatientStudyMetaData",
            "WHERE (Status IS NULL OR Status = '')",
            "  AND MRN             IS NOT NULL AND LTRIM(RTRIM(MRN))             <> ''",
            "  AND LastName        IS NOT NULL AND LTRIM(RTRIM(LastName))        <> ''",
            "  AND InstitutionName IS NOT NULL AND LTRIM(RTRIM(InstitutionName)) <> ''",
            "  AND (",
            "       AccessionNumber IS NULL",
            "    OR LTRIM(RTRIM(AccessionNumber)) = ''",
            "    OR LEN(LTRIM(RTRIM(AccessionNumber))) <= 16",
            "  )",
            "  AND TRY_CONVERT(date,Birthdate,23) IS NOT NULL",
            "  AND StudyInstanceUID   IS NOT NULL AND LTRIM(RTRIM(StudyInstanceUID))   <> ''",
            "END;",
            "GO"
        ],
        "sp_Validate_PatientStudy_ByNulls.sql": [
            "SET ANSI_NULLS ON;",
            "SET QUOTED_IDENTIFIER ON;",
            "GO",
            " ",
            "-- Drop the old batch-based proc if it exists",
            "IF OBJECT_ID('cmmt.sp_Validate_PatientStudy_ByNulls','P') IS NOT NULL",
            "  DROP PROCEDURE cmmt.sp_Validate_PatientStudy_ByNulls;",
            "GO",
            " ",
            "CREATE PROCEDURE cmmt.sp_Validate_PatientStudy_ByNulls",
            "  @CsvType       NVARCHAR(50),",
            "  @ReturnStatus  INT OUTPUT",
            "AS",
            "BEGIN",
            "  BEGIN TRY",
            "  -- run only the procedures for the requested CSV type",
            "  IF UPPER(@CsvType) = 'Patient Study'",
            "  BEGIN",
            "      EXEC cmmt.sp_MarkPatientStudyDuplicates;",
            "      EXEC cmmt.sp_ImportValidationForPatient;",
            "  END",
            "  ELSE IF UPPER(@CsvType) = 'Series Instance'",
            "  BEGIN",
            "    EXEC cmmt.sp_ImportValidationForSeries;",
            "  END",
            "",
            "  SET @ReturnStatus = 0;",
            "  END TRY",
            "  BEGIN CATCH",
            "  -- capture any error number",
            "  SET @ReturnStatus = ERROR_NUMBER();",
            "  END CATCH",
            "END;",
            "GO"
        ]
    }
}
